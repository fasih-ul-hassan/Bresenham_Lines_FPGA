
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE1_SOC( 

////////// ADC //////////
output		          		ADC_CONVST,
output		          		ADC_DIN,
input 		          		ADC_DOUT,
output		          		ADC_SCLK,

//////////// Audio //////////
input 		          		AUD_ADCDAT,
inout 		          		AUD_ADCLRCK,
inout 		          		AUD_BCLK,
output		          		AUD_DACDAT,
inout 		          		AUD_DACLRCK,
output		          		AUD_XCK,

//////////// CLOCK //////////
input 		          		CLOCK2_50,
input 		          		CLOCK3_50,
input 		          		CLOCK4_50,
input 		          		CLOCK_50,

//////////// SDRAM //////////
output		    [12:0]		DRAM_ADDR,
output		     [1:0]		DRAM_BA,
output		          		DRAM_CAS_N,
output		          		DRAM_CKE,
output		          		DRAM_CLK,
output		          		DRAM_CS_N,
inout 		    [15:0]		DRAM_DQ,
output		          		DRAM_LDQM,
output		          		DRAM_RAS_N,
output		          		DRAM_UDQM,
output		          		DRAM_WE_N,

//////////// I2C for Audio and Video-In //////////
output		          		FPGA_I2C_SCLK,
inout 		          		FPGA_I2C_SDAT,

//////////// SEG7 //////////
output		     [6:0]		HEX0,
output		     [6:0]		HEX1,
output		     [6:0]		HEX2,
output		     [6:0]		HEX3,
output		     [6:0]		HEX4,
output		     [6:0]		HEX5,

//////////// IR //////////
input 		          		IRDA_RXD,
output		          		IRDA_TXD,

//////////// KEY //////////
input 		     [3:0]		KEY,

//////////// LED //////////
output		     [9:0]		LEDR,

//////////// PS2 //////////
inout 		          		PS2_CLK,
inout 		          		PS2_CLK2,
inout 		          		PS2_DAT,
inout 		          		PS2_DAT2,

//////////// SW //////////
input 		     [9:0]		SW,

//////////// Video-In //////////
input 		          		TD_CLK27,
input 		     [7:0]		TD_DATA,
input 		          		TD_HS,
output		          		TD_RESET_N,
input 		          		TD_VS,

//////////// VGA //////////
output		          		VGA_BLANK_N,
output		     [7:0]		VGA_B,
output		          		VGA_CLK,
output		     [7:0]		VGA_G,
output		          		VGA_HS,
output		     [7:0]		VGA_R,
output		          		VGA_SYNC_N,
output		          		VGA_VS,

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
	
	
	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;

	
	single_port_ram #(parameter DATA_WIDTH=3, parameter ADDR_WIDTH=15)
		my_ram_instance (
        .data(data_in),
        .addr(address),
        .we(write_en),
        .clk(clock),
        .q(data_out)
		);
	
	
	
	xy_coordinates UU (.clk(CLOCK_50), .reset(KEY[3]), .x(x), .y(y));	
	vga_adapter VGA(
			.resetn(KEY[3]),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(~(KEY[0])),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS));
		defparam VGA.RESOLUTION = "160x120";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;
		defparam VGA.BACKGROUND_IMAGE = "image.colour.mif";
		defparam VGA.USING_DE1 = "TRUE";
	
endmodule


